geneCountFiles <- unlist(lapply(biosamples, function(x)
listFilesInBiosamples(path, assay, x, pattern)))
type <- rep(c("wt", "mut"), each = 6)
repl <- rep(c("1", "2"), times = 6)
time = rep(c("24", "48", "72"), each = 2, times = 2)
sample <- Map(function(x, y, z) paste(x, y, z, sep = "_"), type, time, repl)
geneCountFiles <- setNames(geneCountFiles, sample)
allReadsCounts <- lapply(geneCountFiles, readTagsPerGene)
geneNames <- lapply(allReadsCounts, row.names)
geneList <- Reduce(function(w, z) mapply(function(x, y) if (x == y) x else NA, w, z, SIMPLIFY = TRUE), geneNames)
identical(names(geneList), geneNames[[1]])
totalReadsCount <- sapply(allReadsCounts, function(x) x$totalCount)
rownames(totalReadsCount) <- geneNames[[1]]
coldata <- data.frame(condition = type, time = time)
row.names(coldata) <- sample
sample1 <- c("wt_48_1", "wt_48_2", "mut_48_1", "mut_48_2")
sample1Coldata <- data.frame(condition = coldata[sample1, "condition"], row.names = sample1)
vsd <- genericDESeq(dataCounts = totalReadsCount[,sample1], coldata = sample1Coldata, design = NA, designVariations = c("wt", "mut"))
plotPCA(vsd, intgroup=c("condition"))
sample2 <- c("wt_24_1", "wt_24_2", "wt_48_1", "wt_48_2")
sample2Coldata <- data.frame(condition = coldata[sample2, "time"], row.names = sample2)
vsd <- genericDESeq(dataCounts = totalReadsCount[,sample2], coldata = sample2Coldata, design = NA, designVariations = c("24", "48"))
plotPCA(vsd, intgroup=c("condition"))
sample <- c("wt_24_1", "wt_24_2", "wt_72_1", "wt_72_2")
sampleColdata <- data.frame(condition = coldata[sample, "time"], row.names = sample)
vsd <- genericDESeq(dataCounts = totalReadsCount[,sample], coldata = sampleColdata, design = NA, designVariations = c("24", "72"))
plotPCA(vsd, intgroup=c("condition"))
sample <- c("wt_48_1", "wt_48_2", "wt_72_1", "wt_72_2")
sampleColdata <- data.frame(condition = coldata[sample, "time"], row.names = sample)
vsd <- genericDESeq(dataCounts = totalReadsCount[,sample], coldata = sampleColdata, design = NA, designVariations = c("48", "72"))
plotPCA(vsd, intgroup=c("condition"))
sample <- c("wt_72_1", "wt_72_2", "mut_72_1", "mut_72_2")
sampleColdata <- data.frame(condition = coldata[sample, "condition"], row.names = sample)
vsd <- genericDESeq(dataCounts = totalReadsCount[,sample], coldata = sampleColdata, design = NA, designVariations = c("wt", "mut"))
plotPCA(vsd, intgroup=c("condition"))
coldata
sampleReplicate <- repeat(1:6, each = 2)
sampleReplicate <- rep(1:6, each = 2)
sampleReplicate
control <- rep(0, 6)
control
control <- rep(0, 12)
control <- rep(c(1,0), each = 6)
control
mutant <- Negate(control)
mutant <- !control
mutant
mutant <- as.numeric(!control)
mutant
maSigProDesign <- data.frame(Time = time, Replicate = sampleReplicate, Control = control, Mutant = mutant, row.names = sample)
sample
maSigProDesign <- data.frame(Time = time, Replicate = sampleReplicate, Control = control, Mutant = mutant, row.names = row.names(coldata))
maSigProDesign
library("maSigPro")
biocLite("maSigPro")
library("maSigPro")
data("data.abiotic")
data("edesign.abiotic")
edesign.abiotic
data.abiotic
coldata
totalReadsCount
coldata
dds <- DESeqDataSetFromMatrix(countData = totalReadsCount,)
dds <- DESeqDataSetFromMatrix(countData = totalReadsCount, colData = coldata, design = ~ time + mutation)
coldata
dds <- DESeqDataSetFromMatrix(countData = totalReadsCount, colData = coldata, design = ~ time + condition
)
dds
dds <- DESeq(dds)
counts9dds
counts(dds)
?counts
counts(dds, normalized = TRUE)
normalizedData <- counts(dds, normalized = TRUE)
design <- make.design.matrix(edesign.abiotic, degree = 2)
design
maSigProDesign
design <- make.design.matrix(maSigProDesign, degree = 2)
maSigProDesign
maSigProDesign <- lapply(maSigProDesign, as.numeric)
maSigProDesign
maSigProDesign <- data.frame(Time = as.numeric(time), Replicate = as.numeric(sampleReplicate), Control = as.numeric(control), Mutant = as.numeric(mutant), row.names = row.names(coldata))
maSigProDesign
design <- make.design.matrix(maSigProDesign, degree = 2)
design
fit <- p.vector(data.abiotic, design, Q = 0.05, MT.adjust = "BH", min.obs = 20)
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 20)
head(data.abiotic)
head(normalizedData)
design
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 20)
rownames(design)
row.names(design)
row.names(design$dis) == colnames(maSigProDesign)
row.names(design$dis) == colnames(normalizedData)
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 10)
fit
fit$i
fit$FDR
fit$alpha
fit$alfa
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
?p.vector
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6)
fit$i
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
fit[4900:5000,]
fit$data
traceback()
?T.fit
tstep <- T.fit(normalizedData,design = design, step.method = "backward", alfa = 0.05)
tstep <- T.fit(fit,design = fit$design, step.method = "backward", alfa = 0.05)
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
traceback()
fit$dis
?stepback
fit$y
debug(T.fit(fit,design = fit$design, step.method = "backward", alfa = 0.05))
traceback()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6, family = negative.binomial(theta))
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6, family = poisson())
warnings()
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6, family = gaussian())
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05)
tstep
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6, family = negative.binomial)
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6, family = negative.binomial(theta))
fit <- p.vector(normalizedData, design, Q = 0.05, MT.adjust = "BH", min.obs = 6, family = NULL)
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family = NULL)
fit
fit$SELEC[4900:500,]
fit$SELEC[4900:5000,]
tstep <- T.fit(fit, step.method = "backward", alfa = 0.05, family = NULL)
traceback()
?stepback
dis
tstep <- T.fit(fit, step.method = "forward", alfa = 0.05, family = NULL)
sigs <- get.siggenes(tstep, rsq = 0.6, vars = "groups")
names(sigs)
names(sigs$sig.genes)
names(sigs$sig.genes$MutantvsControl)
sigs$summary
suma2Venn(sigs$summary)
4903 + 3590 + 527
7993 + 500
10890 - 8493
see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis)
see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k = 9)
pdf("timecourse_plots.1.pdf", height = 10, width = 16); see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k = 9); dev.off()
see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE)
see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE)
normalizedData
max(normalizedData[,1])
min(normalizedData[,1])
head(normalizedData)
head(totalReadsCount)
sigs$sig.genes$MutantvsControl
sigs$sig.genes$MutantvsControl$sig.profiles
see.genes
?see.genes
?PlotGroups
as.data.frame(sigs$sig.genes$MutantvsControl)
if (!is.null(dim(data))) {
dat <- as.data.frame(data)
clusterdata <- data
}
else {
clusterdata <- data[[cluster.data]]
dat <- as.data.frame(data$sig.profiles)
}
data <- sigs$sig.genes$MutantvsControl
!is.null(dim(data))
dat <- as.data.frame(dat$sig.frofiles)
dat <- as.data.frame(dat$sig.profiles)
dat <- as.data.frame(data$sig.profiles)
dat
save.image("~/DANIO-CODE_Data_package/timecourse.RData")
savehistory("~/DANIO-CODE_Data_package/timecourse.Rhistory")
head(data)
head(data$sig.profiles)
library("dplyr")
head(cummax(data$sig.profiles))
head(cummin(data$sig.profiles))
?max
head(data$sig.profiles)
row.names(data$sig.profiles)
rn <- row.names(data$sig.profiles)
rn[1]
data$sig.profiles[rn[1],]
max(data$sig.profiles[rn[1],])
data$sig.profiles[rn[1], ] / max(data$sig.profiles[rn[1],])
data$sig.profiles[rn[1], ] <- data$sig.profiles[rn[1], ] / max(data$sig.profiles[rn[1],])
head(data$sig.profiles)
lapply(rn, function(x) data$sig.profiles[x, ] <- data$sig.profiles[x, ] / max(data$sig.profiles[x, ]))
head(data$sig.profiles)
for (x in rn){}
for (x in rn){}
for (x in rn){
data$sig.profiles[x, ] <- data$sig.profiles[x, ] / max(data$sig.profiles[x, ]
}
for (x in rn){
data$sig.profiles[x, ] <- data$sig.profiles[x, ] / max(data$sig.profiles[x, ])
}
head(data$sig.profiles)
?see.genes
library("maSigPro")
see.genes
source('~/DANIO-CODE_Data_package/functions.R')
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE)
source('~/DANIO-CODE_Data_package/functions.R')
source('~/DANIO-CODE_Data_package/functions.R')
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE)
data
source('~/DANIO-CODE_Data_package/functions.R')
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE)
warnings()
source('~/DANIO-CODE_Data_package/functions.R')
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE)
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, newX11 = FALSE)
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, newX11 = FALSE)
source('~/DANIO-CODE_Data_package/functions.R')
pdf("timecourse_plots.1.pdf", height = 10, width = 16); custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, newX11 = FALSE); dev.off()
?PlotProfiles
?see.genes
PlotProfiles()
PlotProfiles
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, color.mode = "gray")
pdf("timecourse_plots.1.pdf", height = 10, width = 16); custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, newX11 = FALSE, color.mode = "gray"); dev.off()
PlotProfiles
PlotProfiles
source('~/DANIO-CODE_Data_package/functions.R')
custom.see.genes(sigs$sig.genes$MutantvsControl, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, color.mode = "gray")
warnings()
?lines
data[1,]
data$sig.profiles[1,]
lines(1:12, data$sig.profiles[1,])
lines(1:12, data$sig.profiles[1,])
plot()
plot(x = c(1:12))
plot(x = c(1:12))
plot(x = c(1:12), y = data$sig.profiles[1,])
dev.off()
lines(1:12, data$sig.profiles[1,])
scatter(1:12, 1:12)
plot(1:12, 1:12)
plot(1:12, 1:12)
plot(1:12, 1:12)
dev.off()
plot(1:12, 1:12)
lines(1:12, data$sig.profiles[1,])
lines(1:12, data$sig.profiles[1,])
plot.new()
lines(1:12, data$sig.profiles[1,])
plot.new()
lines(1:12, data$sig.profiles[1,])
plot.new(xlim = c(1,12), ylim = c(0,1))
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
main = paste("Cluster", main, "(", m, item, ")",
nom, sep = " "), xaxt = "n")
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
main = paste("Cluster", "1", "(", m, item, ")",
nom, sep = " "), xaxt = "n")
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
main = paste("Cluster", "1", "(", 123, item, ")",
nom, sep = " "), xaxt = "n")
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
main = paste("Cluster", "1", "(", "123", item, ")",
nom, sep = " "), xaxt = "n")
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
main = paste("Cluster", "1", "(", "123", "item", ")",
nom, sep = " "), xaxt = "n")
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
xaxt = "n")
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = NULL, ylab = "expression value", xlab = " ",
xaxt = "n")
lines(c(1:12), data$sig.profiles[2,])
plot(x = c(1:12), y = data$sig.profiles[1, ], type = "l", col = 1,
ylim = c(0,1), ylab = "expression value", xlab = " ",
xaxt = "n")
lines(c(1:12), data$sig.profiles[2,])
lines(c(1:12), data$sig.profiles[2,], color = "red")
lines(c(1:12), data$sig.profiles[2,], col = "red")
lines(c(1:12), data$sig.profiles[2,], col = "red")
lines(c(1:12), data$sig.profiles[2,], col = "red", transparent = TRUE)
lines(c(1:12), data$sig.profiles[2,], col = "light red", transparent = TRUE)
lines(c(1:12), data$sig.profiles[2,], col = "light red")
lines(c(1:12), data$sig.profiles[2,], col = "lightred")
lines(c(1:12), data$sig.profiles[3,], col = "light red")
lines(c(1:12), data$sig.profiles[3,], col = "light gray")
lines(c(1:12), data$sig.profiles[3,], col = "very light gray")
library(maSigPro)
test <- see.genes(data, show.fit = TRUE, dis = design$dis, cluster.method = "hclust", cluster.data = 1, k.mclust = TRUE, color.mode = "gray")
test
head(data$sig.profiles)
library(ggplot2)
typeof(data$sig.profiles)
class(data$sig.profiles)
as.matrix(data$sig.profiles)
head(as.matrix(data$sig.profiles))
?transpose
transpose(data$sig.profiles)
t(data$sig.profiles)
t(as.matrix(data$sig.profiles))
head(t(as.matrix(data$sig.profiles)))
head(data$sig.profiles))
head(data$sig.profiles)
head(t(data$sig.profiles))
t(data$sig.profiles)[,1:6]
ggplot(t(data$sig.profiles), aes(ENSDARG00000103095, (1:6), color = "green", alpha = 0.5)) + geom_line()
plot.data <- as.data.frame(t(data$sig.profiles))
plot.data[,1:6]
ggplot(plot.data, aes(ENSDARG00000103095, (1:6), color = "green", alpha = 0.5)) + geom_line()
ggplot(plot.data, aes(ENSDARG00000103095, (1:12), color = "green", alpha = 0.5)) + geom_line()
ggplot(plot.data, aes(ENSDARG00000103095, (1:12), fill = "green", alpha = 0.5)) + geom_line()
ggplot(plot.data, aes(ENSDARG00000103095, (1:6), line = "green", alpha = 0.5)) + geom_line()
head(test$cut)
plot.data
head(plot.data)[,1:6]
head(data$sig.profiles)
test1 <- cbind(data$sig.profiles, test$cut)
head(test1)
library(reshape2)
test.melt<-melt(test1, id.vars=0)
head(test.melt)
test.melt<-melt(test1, id.vars=1)
head(test.melt)
test.melt<-melt(test1, id.vars=c("test$cut", 0))
test.melt<-melt(test1, id.vars=c("test$cut"))
head(test.melt)
head(test1)
test1$gene<-rownames(test1)
test.melt<-melt(test1, id.vars=c("test$cut", "gene"))
head(test.melt)
ggplot(head(test.melt), aes(x=variable, y=value, group=gene)) + geom_line() + facet_wrap(~"test$cut")
colnames(test.melt)[1]<-"cluster"
ggplot(head(test.melt), aes(x=variable, y=value, group=gene)) + geom_line() + facet_wrap(~cluster)
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line() + facet_wrap(~cluster)
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.5) + facet_wrap(~cluster)
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.1) + facet_wrap(~cluster)
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.1) + facet_wrap(~cluster) +theme_bw()
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.1, color = "blue") + facet_wrap(~cluster) +theme_bw()
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.1, color = "light blue") + facet_wrap(~cluster) +theme_bw()
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.1, color = "gray") + facet_wrap(~cluster) +theme_bw()
ggplot(test.melt, aes(x=variable, y=value, group=gene)) + geom_line(alpha = 0.2, color = "gray") + facet_wrap(~cluster) +theme_bw()
savehistory("~/DANIO-CODE_Data_package/timecourse.Rhistory")
save.image("~/DANIO-CODE_Data_package/timecourse.RData")
data$sig.profiles
head(data$sig.profiles)
dat <- data$sig.profiles
dat <- cbind(row.names(dat), dat)
head(dat)
dat <- cbind(genes = row.names(dat), dat)
library(dplyr)
gather(dat, "gene", "exp")
library(tidyr)
gather(dat, "gene", "expr")
dat
head(dat)
dat <- dat[-c("row.names(dat)")]
dat <- dat[,-c("row.names(dat)")]
dat <- dat[,-"row.names(dat)"]
dat <- dat[,!"row.names(dat)"]
dat <- dat[,!c("row.names(dat)")]
dat <- dat[,"row.names(dat)"]
dat
dat <- data$sig.profiles
dat <- cbind(genes = row.names(dat), dat)
gather(dat, "genes", "expr")
dat <- gather(dat, "genes", "expr")
colnames(dat) <- c("genes", "type", "expr")
head(dat)
separate(dat, type, c("mut", "time", "rep"), sep = "_")
dat <- separate(dat, type, c("mut", "time", "rep"), sep = "_")
head(dat)
head(test$cut)
test$cut[dat$genes[1]]
dat$genes[1]
unfactor(dat$genes)
dat$genes <- as.character(dat$genes)
dat$genes[1:6]
test$cut[dat$genes[1:6]]
lapply(dat$genes, function(x) test$cut(x))
lapply(dat$genes, function(x) test$cut[x])
unlist(lapply(dat$genes, function(x) test$cut[x]))
clusts <- unlist(lapply(dat$genes, function(x) test$cut[x]))
head(cbind(dat, clusts))
head(test$cut)
library(ggplot2)
ggplot(dat, aes(time, expr, group=gene) + geom_boxplot(aes(position = factor(time)))
)
ggplot(dat, aes(time, expr, group=gene)) + geom_boxplot(aes(position = factor(time)))
ggplot(dat, aes(time, expr, group=genes)) + geom_boxplot(aes(position = factor(time)))
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(~ mut)
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(~ mut = clusts)
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(~ mut + clusts)
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(mut ~ clusts)
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(~ clusts)
ggplot(dat, aes(time, expr, group=genes)) + geom_line()
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(~ mut)
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(~ clusts)
head(dat)
dat <- cbind(dat, clusts)
head(dat)
ggplot(dat, aes(time, expr, group=genes)) + geom_line() + facet_grid(mut ~ clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.2)) + geom_line() + facet_grid(mut ~ clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line() + facet_grid(mut ~ clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line(alpha = 0.1) + facet_grid(mut ~ clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line(alpha = 0.1) + facet_grid(clusts ~ mut)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line(wt, alpha = 0.1) + facet_grid(~clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line(alpha = 0.1, aes(wt)) + facet_grid(~clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line(alpha = 0.1, aes(mut)) + facet_grid(~clusts)
ggplot(dat, aes(time, expr, group=genes, alpha = 0.1)) + geom_line(alpha = 0.1, aes(group = mut)) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes)) + geom_line(alpha = 0.1, color = mut) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes)) + geom_line(alpha = 0.1, colour = mut) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_line(alpha = 0.1) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_point(alpha = 0.1) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_line(alpha = 0.1) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_jitter(alpha = 0.1) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_boxplot(alpha = 0.1) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_boxplot(position = factor(time)) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_boxplot(aes(position = factor(time)) + facet_grid(~clusts)
)
ggplot(dat, aes(x = time, y = expr, group=genes, colour = mut)) + geom_boxplot(aes(position = factor(time))) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr) + geom_boxplot(aes(position = factor(time))) + facet_grid(~clusts)
)
ggplot(dat, aes(x = time, y = expr)) + geom_boxplot(aes(position = factor(time))) + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, group = mut)) + geom_boxplot() + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, color = mut)) + geom_boxplot() + facet_grid(~clusts)
ggplot(dat, aes(x = time, y = expr, color = mut)) + geom_boxplot() + facet_grid(~ clusts)
ggplot(dat, aes(x = time, y = expr, color = mut)) + geom_line() + facet_grid(~ clusts)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes)) + facet_grid(~ clusts)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.1) + facet_grid(~ clusts)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.1, color = "light blue") + facet_grid(~ clusts)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.1, color = "light blue") + facet_grid(mut~ clusts)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.2, color = "light green") + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.2, color = "light green") + geom_boxplot() + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = genes), alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
warnings()
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(method = glm, aes(group = genes), alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
library(maSigPro)
PlotGroups()
PlotGroups
?reg.coeffs
data$coefficients
reg.coeffs
reg.coeffs(data$coefficients)
reg.coeffs(data$coefficients, groups.vector = )
reg.coeffs(data$coefficients, groups.vector = design)
design
reg.coeffs(data$coefficients, groups.vector = design$groups.vector)
data$coefficients
unlist(data$coefficients)
head(as.matrix(data$coefficients))
reg.coeffs(as.matrix(data$coefficients), groups.vector = design$groups.vector)
PlotGroups
design
design$edesign[c(3:length(design$edesign))]
reg.coeffs(as.matrix(data$coefficients), groups.vector = design$groups.vector, group = control)
reg.coeffs(as.matrix(data$coefficients), groups.vector = design$groups.vector, group = mutant)
PlotGroups()
PlotGroups
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(method = glm, alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(color = "gray")
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(method = loess, color = "gray")
ggplot(dat, aes(x = time, y = expr)) + geom_smooth()
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(group = genes)
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = genes))
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = mut))
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = mut), k = 2)
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = mut, k = 2))
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = genes, colour = mutant))
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(aes(group = genes, colour = mut))
ggplot(dat, aes(x = time, y = expr)) + geom_smooth(method = glm, aes(group = genes, colour = mut))
34 * 1061
10613 / 34
library(goseq)
biocLite("goseq")
library(goseq)
supportedGenomes()
supportedOrganisms()
library(GenomicFeatures)
makeTxDbFromBiomart()
head(dat)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
library(ggplot2)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
ggplot(dat, aes(x = time, y = expr)) + geom_line(aes(group = genes), alpha = 0.2, color = "gray") + geom_boxplot() + facet_grid(clusts ~ mut)
savehistory("~/DANIO-CODE_Data_package/timecourse.Rhistory")
source("https://bioconductor.org/biocLite.R")
biocLite()
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("ggplot2")
library(knitr)
summary(cars)
library(knitr)
library(packrat)
install.packages("tidyverse")
